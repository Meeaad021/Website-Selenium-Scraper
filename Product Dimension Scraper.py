import openpyxl as openpyxl
import os
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from webdriver_manager.chrome import ChromeDriverManager

options = Options()
options.add_experimental_option("detach", True)

driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=options)

driver.maximize_window()

driver.get("https://brands.silo.co.za/#/Job/JobListingV2")

full_name_input = driver.find_element(By.ID, "Fullname")
full_name_input.send_keys("Meeaad Bharoochi")

full_name_input = driver.find_element(By.ID, "Password")
full_name_input.send_keys("Password@1")

submit_button = driver.find_element(By.CLASS_NAME, "btn-primary")
submit_button.click()

dropdown_toggle = WebDriverWait(driver, 10).until(
    EC.element_to_be_clickable((By.CLASS_NAME, 'dropdown-toggle'))
)

dropdown_toggle.click()

jobs_link = WebDriverWait(driver, 10).until(
    EC.element_to_be_clickable((By.LINK_TEXT, 'Jobs'))
)

jobs_link.click()

xpath = "//a[contains(@href, 'JobListingV2')]"
jobs_link = WebDriverWait(driver, 10).until(
    EC.element_to_be_clickable((By.XPATH, xpath))
)
jobs_link.click()

barcodes= ["6004045014064", "6004045013968", "6004045021451", "6004045039449", "6004045000197", "6004045038176", "6001378060041", "6001378053821", "6001378053807", "6001378053838", "6001378053630", "6001378053814", "6001378053616", "6001378001600", "6001378053623", "6001378053609", "6004045001262", "6004045042319", "6001378001471", "6004045000517", "6001378030457", "6004045021499", "6004045001033", "309970999124", "309978695325", "309978695349", "309978695455", "6001378324464", "309970999605", "309976623498", "309976623610", "309970999353", "309970999100", "309978695318", "309978695431", "309970999544", "309978695745", "309978695110", "309976623054", "309978535010", "309978535027", "309978535126", "309970193249", "309970193256", "309970193287", "309970193270", "309970193300", "309970193263", "309970193294", "309970193232", "309970086640", "309970086633", "309970050542", "309970050566", "309970050573", "309970050559", "309970108960", "309970174842", "309970174897", "309970174866", "309977948040", "309977948057", "309977948026", "309970088019", "309970088033", "309970088095", "309970088088", "309970088040", "309970088026", "6004044081890", "6004044081777", "6004044081784", "6004044081852", "6004044094258", "309970172268", "309970166151", "309970172251", "309970166083", "309970166120", "309970166090", "309970166168", "10309978564024", "10309978564017", "309975133011", "309970157302", "309970169343", "309970157319", "309970157289", "309977401040", "309977401026", "309976790015", "309972093028", "309970090647", "309976790039", "309976790046", "309970086749", "309970086756", "3099720930283", "309970039035", "309970039028", "309970039011", "309970039059", "309970108038", "309970107925", "309970108106", "309970108014", "309970108045", "309970107970", "309970107963", "309970108007", "309970107956", "309970107949", "309970108021", "309970107994", "309970107987", "309976012049", "309976012070", "309976012247", "309976012292", "309976012261", "309976012254", "309976009018", "309976012315", "309979832026", "309979832019", "309979832040", "309970006402", "309979832064", "309970006372", "309970006365", "309970006396", "309979832057", "309979832033", "309970006358", "309970071608", "309970072025", "309970071875", "309970072032", "309970072070", "309970072049", "309970071714", "309970072063", "309970071813", "309970071707", "309970071691", "309970071905", "309970071950", "309970071806", "309970166366", "309970166465", "309970166403", "309970166397", "309970166373", "309970166458", "309974172103", "309974172134", "309974172226", "309974172110", "6004044094241", "6004044094234", "309976012032", "309976012131", "309978418634", "309978418641", "309978418672", "309970175160", "309970175085", "309970175122", "309970175177", "309970175139", "309970175184", "309970175153", "309970175146", "309970175115", "309970175092", "309970175108", "309970175078", "309970054922", "309970054953", "309970077532", "309970077518", "309970054946", "733854997393", "309979380381", "6004044094821", "6004044094791", "6004044094838", "309974244589", "309970075965", "309970075989", "309970076047", "309979380022", "309979380329", "309970076030", "309970076023", "309979380145", "309970075972", "6004046080976", "6004044081012", "6004044081029", "6004044080961", "6004044081005", "6004044080992", "6004044081050", "6004044080985", "309970157296", "6004044081982", "6004044081975", "309970173586", "309970173548", "309970173531", "309970173562", "309970173579", "309970117078", "309970117177", "309970117047", "309970117092", "309970131180", "309970117085", "309970131203", "309970117139", "309970131227", "309970117023", "309970165116", "10309978552014", "10309978552038", "309970166076", "309970173555", "309978392552", "309978161202", "309978161288", "75724252028", "75724252011", "75724251991", "75724428010", "6001378076653", "6001378076615", "6001378076646", "6001378076608", "6001378076639", "6001378076622", "6004045039463", "6004045039425", "6004045044009", "60093257", "6001378050127", "6001378070255", "6001378070231", "6001378070293", "16004045641007", "6001378070286", "6004045043187", "6001378010213", "6001378001327", "6001378001402", "6004045039456", "60093240", "6001378610215", "6004045044030", "6001378091090", "6001378091069", "8411126033858", "6001378091175", "6001378091151", "6001378091106", "6001378001136", "6001378469509", "6001378046908", "6001378691191", "6001378046915", "6001378046847", "6001378046984", "6001378091113", "6001378091045", "6001378070132", "6001378001532", "6001378469608", "6001378001143", "6001378091038", "6001378091021", "6001378091083", "8411126033827", "8411126019357", "6001378091052", "6001378091076", "8411126033834", "6001378046885", "6001378091199", "6001378029642", "6001378029635", "6004045000753", "6001378011432", "16004045641014", "6004045040018", "6004045039975", "6001378037999", "6004045020782", "6001378060348", "6001378060324", "6001378060331", "6001378060355", "6004045043040", "6001378050851", "6001378041835", "309973091153", "309975813005", "309973105126", "309973202009", "309973156005", "309973234000", "6001378048568", "6001378048513", "309973105133", "309970203429", "309970203412", "309970121365", "309970121372", "309971103322", "309971103292", "309971103278", "309971103308", "309977984062", "309973155008", "6001378310412", "309971103841", "6001378048551", "6001378048520", "6001378048537", "6001378048490", "6001378050752", "309979550753", "6001378010381", "6001378010398", "6001378022742", "6001378022735", "6001378022728", "6004045042418", "6001378022674", "6004045039265", "6004045042388", "6004045044115", "6001378061840", "6004045041022", "6004045042395", "6004045027019", "6004045027002", "6004045018628", "6004045026999", "6004045038190", "6001378002454", "6001378002461", "309975212051", "309975212600", "309975212105", "309975212556", "309975212501", "309975212259", "309976386027", "309974378017", "6004044081883", "6004044081760", "6004044081869", "6004044081876", "6004044081937", "6004044081807", "6004044081791", "6004044081821", "6004044081845", "6004044081944", "6004044082026", "6004044082002", "6004044081951", "6004044081968", "6004044082019", "6004044081999", "6004044081838", "309970188559", "309970188542", "309970188535", "309970188511", "309974172073", "309976849089", "309979380046", "309979380527", "8411126066474", "309977641040", "60083463", "309977956014", "6004045043002", "309977955017", "309970047962", "309970039042", "309977448014", "309970108052", "309978992073", "309970006884", "309979750016", "309977854020", "309977854013", "309971879357", "309971879203", "309971879104", "309979380282", "309974172011", "309979632657", "309977710012", "6004045043088", "6004045042968", "309978957010", "309978914013", "6004044087144", "6004044087182", "6004044087120", "309977563038", "309970165109", "309979885015", "309979824021", "9981239", "9984634", "99800000129", "309970095499", "60077912", "91000000503", "309970054977", "60085535", "309977467084", "91000009148", "6004044094333", "6004044094401", "6004044094395", "6004044094388", "6004044094319", "6004044094371", "6004044094357", "6004044094326", "6004044094340", "309977884157", "6004044094470", "6004044094456", "6004044094487", "6004044094425", "6004044094418", "6004044094449", "6004044094463", "6004044094494", "6004044094432", "6004044094364", "309974566353", "6004045044108", "309970006891", "309970007058", "309970007096", "309970006976", "309978992103", "309970007041", "309970007348", "309970006983", "309970007065", "309970007126", "309970089351", "309970006426", "309978683063", "309970007010", "309970007089", "309970007119", "309978992110", "309970007102", "309978992097", "309970007034", "309978992066", "309978673019", "309974566209", "309974566650", "309974566452", "309974566704", "309974566551", "309974566506", "309974566605", "309974566407", "309974566308", "309970093624", "309970093631", "309970093648", "309974422000", "309970127275", "309970078775", "309970078805", "309970078799", "309970078836", "309974784030", "309974784061", "309974784016", "309974784184", "309974784146", "309970058760", "309970048563", "309970076016", "309970144869", "309970086541", "309970086527", "309970086534", "309977467077", "309970165123", "8411126066436", "8411126066443", "8411126066429", "8411126067006", "8411126066450", "6004045044733", "309970093310", "309970093327", "309970093303", "309970093297", "309970093839", "309970093822", "309970126476", "309970126483", "309970174736", "309970174705", "309977563021", "309977563014", "309970116385", "309970116392", "309970116347", "309970116330", "309970116316", "309970116415", "309970047955", "309979030019", "309979014019", "309970091477", "309970081119", "309970091521", "309970081218", "309970081188", "309970081133", "309970091507", "309970081126", "309970081164", "309970081102", "309970081171", "91000000329", "6004046065003", "99800000815", "91000007113", "309978743071", "309972436412", "33000000015", "91000000206", "99800000310", "99800000464", "309978743040", "80100005341", "309973064805", "309973064355", "309973064102", "309973064553", "309973064850", "309973064904", "309973064058", "309973064959", "309973064409", "309973064454", "309970038908", "80100004757", "309979632398", "309979632152", "80100005648", "309979632213", "80100005662", "80100004511", "80100005563", "309979632374", "309970038939", "6004044003151", "309972924506", "6004044003144", "600404400314", "309978924104", "80100004474", "91000009025", "309976954080", "309979632404", "80100004955", "80100005488", "309970878016", "309970039561", "309970039318", "309970039608", "309970039738", "309970039691", "309970039509", "309970039585", "309970039837", "309970039813", "309970039820", "309970039523", "309970039486", "309970097912", "0033000000060", "309970097967", "0099800000839", "309970097974", "309970097929", "309970095482", "309978743026", "309976399010", "309976402017", "309970060046", "309970060077", "309970036522", "309970054526", "309970073329", "309970047948", "309978605010", "309976297019", "309976182018", "309976113012", "309978695462", "6001378001396", "6004045039487", "6004045039494", "6004045039258", "733854980616", "733854980258", "733854997652", "733854997614", "733854998857", "733854997461", "733854995214", "733854997515", "733854997591", "99500000696", "733854998826", "60081070", "6001378032253", "6004045043149", "6004045040056", "16001378291466", "6004045040995", "6004045000791", "6001378062250", "6004045040070", "6004045023837", "6004045023615", "309978695202", "6004045041008", "6001378051858", "6001378051919", "6004045023882", "6001378048544", "309977984109", "6001378050813", "309973162006", "6001378048506", "309977984079", "309970121334", "309970121327", "309977984116", "309970039073", "309970224639", "309975122299", "6001378010411", "6001378010404", "309979550777", "309970038885", "309975122084", "309975122091", "6004045042401", "6004045038183", "6004045023875", "6001378002447", "6004045029792", "309970117030", "309970117061", "309970117115", "309970117146", "309970117122", "309970117160", "309970131159", "309970131197", "309970131210", "309970131234", "309970187040", "309970187057", "309970187064", "309970187071", "309970187118", "309970187132", "309970187149", "309970187170", "309970187187", "309970187200", "309970187217", "309970187248", "309970187231", "309970206116", "309970206130", "309970210502", "309970210601", "309970210564", "309970210557", "309970210571", "309970210533", "309970210526", "309970210540", "309970210670", "309970210625", "309970210632", "309970210649", "309970210694", "309970210656", "309970210663", "309970210588", "6004045037803", "6004045043248", "6004045043217", "6004045043224", "6004045029747", "6004045043231", "6004045038206", "6004045023844", "6004045023851"
]

excel_file = "Revlon.xlsx"

if os.path.exists(excel_file):
    # Open the existing Excel file
    wb = openpyxl.load_workbook(excel_file)
    ws = wb.active
    # Get the last row number with data
    last_row = ws.max_row
else:

 wb = openpyxl.Workbook()
 ws = wb.active
 ws.cell(row=1, column=1, value="Barcode Number")
 ws.cell(row=1, column=2, value="Brand")
 ws.cell(row=1, column=3, value="Description")
 ws.cell(row=1, column=4, value="UOS")
 ws.cell(row=1, column=5, value="UOM")
 ws.cell(row=1, column=6, value="Depth Value")
 ws.cell(row=1, column=7, value="Width Value")
 ws.cell(row=1, column=8, value="Height Value")
 ws.cell(row=1, column=9, value="Weight Value")

row_num = 2

for barcode in barcodes:
    barcode_input = WebDriverWait(driver, 20).until(
        EC.element_to_be_clickable((By.ID, "Barcode"))
    )
    barcode_input.clear()
    barcode_input.send_keys(barcode)

    search_button = WebDriverWait(driver, 10).until(
        EC.element_to_be_clickable((By.ID, "search"))
    )
    search_button.click()

    try:
        export_to_library_td = WebDriverWait(driver, 30).until(
            EC.element_to_be_clickable((By.XPATH, "//td[@role='gridcell']"))
        )
        export_to_library_td.click()
    except:
        print(f"Timeout while processing barcode {barcode}. Skipping...")
        continue

    depth_input = WebDriverWait(driver, 20).until(
        EC.presence_of_element_located((By.ID, "Depth"))
    )
    depth_value = depth_input.get_attribute("value")

    width_input = WebDriverWait(driver, 10).until(
        EC.presence_of_element_located((By.ID, "Width"))
    )
    width_value = width_input.get_attribute("value")

    height_input = WebDriverWait(driver, 10).until(
        EC.presence_of_element_located((By.ID, "Height"))
    )
    height_value = height_input.get_attribute("value")

    weight_input = WebDriverWait(driver, 20).until(
        EC.presence_of_element_located((By.ID, "Weight"))
    )
    weight_value = weight_input.get_attribute("value")

    barcode_div = WebDriverWait(driver, 20).until(
        EC.presence_of_element_located((By.ID, "jobBarcode"))
    )
    barcode_number = barcode_div.text.strip()

    if barcode == barcodes[-1]:
        break

    td_elements = driver.find_elements(By.XPATH, "//tr[@role='row']/td")
    if len(td_elements) >= 8:
        brand_td = td_elements[4]
        brand_name = brand_td.text.strip()

        Description = td_elements[5].text.strip()
        UOS = td_elements[6].text.strip()
        UOM = td_elements[7].text.strip()

        ws.cell(row=row_num, column=1, value=barcode_number)
        ws.cell(row=row_num, column=6, value=depth_value)
        ws.cell(row=row_num, column=7, value=width_value)
        ws.cell(row=row_num, column=8, value=height_value)
        ws.cell(row=row_num, column=9, value=weight_value)
        ws.cell(row=row_num, column=2, value=brand_name)
        ws.cell(row=row_num, column=3, value=Description)
        ws.cell(row=row_num, column=4, value=UOS)
        ws.cell(row=row_num, column=5, value=UOM)

    wb.save(excel_file)

    row_num += 1

    overlay = WebDriverWait(driver, 10).until(
        EC.invisibility_of_element_located((By.CLASS_NAME, 'ui-widget-overlay'))
    )

    clear_button = WebDriverWait(driver, 10).until(
        EC.element_to_be_clickable((By.ID, "btn_Clear"))
    )
    clear_button.click()

wb.save(excel_file)
driver.quit()
